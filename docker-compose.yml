version: '3.8'

services:
  # Servicio N8N para orquestación de workflows con HTTPS
  n8n:
    image: n8nio/n8n:latest
    container_name: security-audit-automation-n8n-1
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows:/home/node/.n8n/workflows
      - ./ssl:/etc/ssl/n8n:ro  # Certificados SSL
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_SECURE_COOKIE=true
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - N8N_SSL_KEY=/etc/ssl/n8n/key.pem
      - N8N_SSL_CERT=/etc/ssl/n8n/cert.pem
    networks:
      - pentest-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  # Contenedor Kali con herramientas de pentesting + API
  kali:
    build:
      context: .
      dockerfile: docker/dockerfile.kali
    container_name: security-audit-automation-kali-1
    ports:
      - "8080:8080"  # Puerto para API HTTP
      - "2222:22"    # SSH (opcional)
    volumes:
      - ./results:/opt/pentest/results
      - ./config:/opt/pentest/config
      - ./scripts:/opt/pentest/scripts
      - ./reports:/opt/pentest/reports
      - ./logs:/opt/pentest/logs
      - ./wordlists:/opt/pentest/wordlists
    networks:
      - pentest-network
    privileged: true  # Para raw sockets de nmap
    cap_add:
      - NET_ADMIN
      - NET_RAW
    tty: true
    stdin_open: true
    restart: unless-stopped
    command: /bin/bash -c "python3 /opt/pentest/kali-api-service.py & /usr/sbin/sshd -D"

  # Servicio de reportes especializado
  reporting:
    build:
      context: .
      dockerfile: docker/dockerfile.reporting
    container_name: security-audit-automation-reporting-1
    ports:
      - "8081:80"
    volumes:
      - ./reports:/opt/reports
      - ./results:/opt/results
      - ./templates:/opt/templates
    networks:
      - pentest-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Base de datos PostgreSQL para almacenar resultados
  postgres:
    image: postgres:15-alpine
    container_name: security-audit-automation-postgres-1
    environment:
      POSTGRES_DB: pentest_results
      POSTGRES_USER: pentest
      POSTGRES_PASSWORD: pentest_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - pentest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pentest -d pentest_results"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y cola de tareas
  redis:
    image: redis:7-alpine
    container_name: security-audit-automation-redis-1
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pentest-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_secure_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de monitoreo opcional
  portainer:
    image: portainer/portainer-ce:latest
    container_name: security-audit-automation-portainer-1
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - pentest-network
    restart: unless-stopped

# Redes
networks:
  pentest-network:
    driver: bridge
    name: security-audit-automation_pentest-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volúmenes persistentes
volumes:
  n8n_data:
    name: security-audit-automation_n8n_data
  postgres_data:
    name: security-audit-automation_postgres_data
  redis_data:
    name: security-audit-automation_redis_data
  portainer_data:
    name: security-audit-automation_portainer_data

# Configuración adicional
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
