{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -440,
        -100
      ],
      "id": "344e293b-9eac-4208-9da9-a210b52486fc",
      "name": "Telegram Trigger",
      "webhookId": "64fbbd15-c99d-4de1-9ffb-7b7a97459c70",
      "credentials": {
        "telegramApi": {
          "id": "ktOR7YmyhzdMBJFv",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const msg = $input.first().json;\n\n// Validar que el mensaje existe y tiene la estructura correcta\nif (!msg || !msg.message) {\n  return [{\n    json: {\n      chatId: 'unknown',\n      text: '‚ùå Error: Mensaje no v√°lido recibido.',\n      error: true\n    }\n  }];\n}\n\nconst chatId = msg.message.chat.id;\nconst messageText = (msg.message.text || '').trim();\n\n// Almacenamiento temporal en memoria (se perder√° al reiniciar el workflow)\n// Para persistencia real necesitar√≠as una base de datos o Google Sheets\nglobal.userData = global.userData || {};\nif (!global.userData[chatId]) {\n  global.userData[chatId] = {};\n}\n\nconst userData = global.userData[chatId];\n\n// Variables para controlar el flujo\nlet responseText = '';\nlet shouldTriggerScan = false;\nlet scanData = {};\n\ntry {\n  // Comandos de inicio\n  if (messageText === '/start' || messageText === '/auditoria') {\n    // Limpiar datos anteriores\n    global.userData[chatId] = {};\n    responseText = 'üè¢ **Paso 1/3: Nombre de Empresa**\\n\\nIngresa el nombre de la empresa a auditar:';\n    \n  } else if (messageText === '/cancel') {\n    // Limpiar datos\n    global.userData[chatId] = {};\n    responseText = '‚ùå Proceso cancelado.\\n\\nUsa /auditoria para comenzar una nueva auditor√≠a.';\n    \n  } else if (messageText && !messageText.startsWith('/')) {\n    \n    // CONFIRMACI√ìN FINAL\n    if (messageText.toLowerCase() === 'si' || messageText.toLowerCase() === 's√≠') {\n      if (userData.empresa && userData.ip_range && userData.intensidad) {\n        responseText = '‚úÖ **Auditor√≠a Confirmada**\\n\\nüöÄ Iniciando escaneo de seguridad...\\n\\nRecibir√°s una notificaci√≥n cuando el escaneo est√© completo.';\n        \n        shouldTriggerScan = true;\n        \n        // Datos para el webhook del escaneo\n        scanData = {\n          target_network: userData.ip_range,\n          scan_intensity: userData.intensidad,\n          empresa: userData.empresa,\n          chat_id: chatId,\n          timestamp: new Date().toISOString()\n        };\n        \n        // Limpiar datos despu√©s de confirmar\n        global.userData[chatId] = {};\n      } else {\n        responseText = '‚ùå **Error: Faltan datos**\\n\\nAlgunos par√°metros no est√°n completos. Usa /auditoria para comenzar de nuevo.';\n      }\n      \n    } else if (messageText.toLowerCase() === 'no') {\n      // Limpiar datos\n      global.userData[chatId] = {};\n      responseText = '‚ùå **Auditor√≠a Cancelada**\\n\\nUsa /auditoria para comenzar de nuevo.';\n      \n    // PASO 3: INTENSIDAD DEL ESCANEO\n    } else if (['low', 'medium', 'high'].includes(messageText.toLowerCase())) {\n      // Guardar intensidad\n      userData.intensidad = messageText.toLowerCase();\n      \n      responseText = `üîç **Confirmaci√≥n de Par√°metros**\\n\\n` +\n                    `üìã **Resumen de la auditor√≠a:**\\n` +\n                    `‚Ä¢ **Empresa:** ${userData.empresa || 'No definida'}\\n` +\n                    `‚Ä¢ **IP:** ${userData.ip_range || 'No definida'}\\n` +\n                    `‚Ä¢ **Intensidad:** ${userData.intensidad}\\n\\n` +\n                    `¬øConfirmas iniciar la auditor√≠a con estos par√°metros?\\n\\n` +\n                    `Responde **SI** o **NO**`;\n      \n    // PASO 2: RANGO IP (Validaci√≥n mejorada)\n    } else if (/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(messageText)) {\n      // Validar que cada octeto est√© entre 0-255\n      const octets = messageText.split('.');\n      const validOctets = octets.every(octet => {\n        const num = parseInt(octet);\n        return num >= 0 && num <= 255;\n      });\n      \n      if (validOctets) {\n        // Guardar IP\n        userData.ip_range = messageText;\n        \n        responseText = '‚ö° **Paso 3/3: Intensidad del Escaneo**\\n\\n' +\n                      'Selecciona la intensidad:\\n' +\n                      '‚Ä¢ **low** - Escaneo b√°sico y r√°pido\\n' +\n                      '‚Ä¢ **medium** - Escaneo est√°ndar balanceado\\n' +\n                      '‚Ä¢ **high** - Escaneo completo y exhaustivo\\n\\n' +\n                      'Escribe: low, medium o high';\n      } else {\n        responseText = '‚ùå **IP no v√°lida**\\n\\n' +\n                      'Los valores deben estar entre 0-255.\\n' +\n                      'Ejemplo v√°lido: 192.168.1.1\\n\\n' +\n                      'Ingresa una IP v√°lida:';\n      }\n      \n    // PASO 1: NOMBRE DE EMPRESA\n    } else {\n      // Validar que no est√© vac√≠o y tenga al menos 2 caracteres\n      if (messageText.length < 2) {\n        responseText = '‚ùå **Nombre muy corto**\\n\\n' +\n                      'El nombre de la empresa debe tener al menos 2 caracteres.\\n\\n' +\n                      'Ingresa un nombre v√°lido:';\n      } else if (messageText.length > 100) {\n        responseText = '‚ùå **Nombre muy largo**\\n\\n' +\n                      'El nombre no puede exceder 100 caracteres.\\n\\n' +\n                      'Ingresa un nombre m√°s corto:';\n      } else {\n        // Guardar empresa\n        userData.empresa = messageText;\n        \n        responseText = 'üåê **Paso 2/3: Rango de IP**\\n\\n' +\n                      'Ingresa la IP base para el escaneo.\\n' +\n                      '**Formato:** Solo la IP, sin m√°scara de red\\n' +\n                      '**Ejemplo:** 192.168.1.1\\n\\n' +\n                      'Ingresa la IP:';\n      }\n    }\n    \n  } else {\n    // Comando no reconocido\n    responseText = 'ü§ñ **Bot de Auditor√≠a de Seguridad**\\n\\n' +\n                  '**Comandos disponibles:**\\n' +\n                  '‚Ä¢ /auditoria - Iniciar nueva auditor√≠a\\n' +\n                  '‚Ä¢ /cancel - Cancelar proceso actual\\n\\n' +\n                  'Usa /auditoria para comenzar.';\n  }\n\n} catch (error) {\n  // Manejo de errores generales\n  responseText = '‚ùå **Error interno**\\n\\n' +\n                'Se produjo un error al procesar tu solicitud.\\n' +\n                'Intenta nuevamente con /auditoria';\n  \n  console.error('Error en el bot:', error);\n}\n\n// Preparar salidas\nlet outputs = [{\n  json: {\n    chatId: chatId,\n    text: responseText,\n    error: responseText.includes('‚ùå'),\n    outputType: 'telegram'\n  }\n}];\n\n// Si hay que disparar el escaneo\nif (shouldTriggerScan) {\n  outputs.push({\n    json: {\n      ...scanData,\n      outputType: 'webhook',\n      webhookUrl: `https://n8n-n8n.huznwo.easypanel.host/webhook/scan-network?target_network=${scanData.target_network}&scan_intensity=${scanData.scan_intensity}`\n    }\n  });\n}\n\nreturn outputs;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -220,
        -100
      ],
      "id": "a8e8a98e-9eca-4e2c-9d81-b519ce2fc028",
      "name": "Procesar chat"
    },
    {
      "parameters": {
        "httpMethod": "GET,POST",
        "path": "scan-network",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "ae6d001e-37ec-44ab-9156-064094eaaac6",
      "name": "Start Network Scan",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -980,
        340
      ],
      "webhookId": "scan-network-webhook-robust",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// Configurar par√°metros del escaneo - Compatible GET/POST con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en el nodo');\n  return [{\n    json: {\n      error: 'No input data received',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Obtener datos de manera segura\nconst inputData = items[0];\nif (!inputData || !inputData.json) {\n  console.error('‚ùå Datos de entrada inv√°lidos');\n  return [{\n    json: {\n      error: 'Invalid input data structure',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nconst data = inputData.json;\n\n// Extraer par√°metros de diferentes fuentes de manera segura\nconst body = data.body || {};\nconst query = data.query || {};\nconst headers = data.headers || {};\n\nconsole.log('Datos recibidos - Body:', JSON.stringify(body));\nconsole.log('Datos recibidos - Query:', JSON.stringify(query));\n\n// Determinar fuente de par√°metros\nlet params = {};\n\n// Priorizar body si existe (POST)\nif (body && typeof body === 'object' && Object.keys(body).length > 0) {\n  params = body;\n  console.log('‚úÖ Usando par√°metros del body (POST)');\n} \n// Usar query si existe (GET)\nelse if (query && typeof query === 'object' && Object.keys(query).length > 0) {\n  params = query;\n  console.log('‚úÖ Usando par√°metros de query (GET)');\n} \n// Fallback: usar datos directos del webhook\nelse if (data && typeof data === 'object') {\n  params = data;\n  console.log('‚úÖ Usando datos directos del webhook');\n} \n// √öltima opci√≥n: valores por defecto\nelse {\n  console.log('‚ö†Ô∏è No se encontraron par√°metros, usando valores por defecto');\n  params = {};\n}\n\n// Configuraci√≥n del escaneo con valores por defecto seguros\nconst config = {\n  target_network: params.target_network || params.target || '127.0.0.1',\n  scan_intensity: params.scan_intensity || params.intensity || 'medium',\n  scan_type: params.scan_type || params.type || 'ping_sweep',\n  timeout: parseInt(params.timeout) || 120,\n  execution_id: 'scan_' + Date.now(),\n  timestamp: new Date().toISOString()\n};\n\n// Validar que target_network es v√°lido\nif (!config.target_network || config.target_network.trim() === '') {\n  config.target_network = '127.0.0.1';\n  console.log('‚ö†Ô∏è Target network vac√≠o, usando 127.0.0.1');\n}\n\n// Validar timeout\nif (config.timeout < 10 || config.timeout > 600) {\n  config.timeout = 120;\n  console.log('‚ö†Ô∏è Timeout fuera de rango, usando 120 segundos');\n}\n\n// Mapear intensidad a configuraci√≥n\nconst intensityMap = {\n  low: { scan_type: 'ping_sweep', timeout: 60, ports: 'top-20' },\n  medium: { scan_type: 'ping_sweep', timeout: 120, ports: 'top-100' },\n  high: { scan_type: 'arp_scan', timeout: 180, ports: 'top-1000' }\n};\n\nconst intensity = intensityMap[config.scan_intensity] || intensityMap.medium;\nconfig.scan_type = intensity.scan_type;\nconfig.timeout = Math.max(config.timeout, intensity.timeout);\nconfig.ports = intensity.ports;\n\nconsole.log('‚úÖ Configuraci√≥n final v√°lida:', JSON.stringify(config));\n\nreturn [{\n  json: config\n}];"
      },
      "id": "8905f286-27f6-4d40-bf30-8ffeddce3450",
      "name": "Configure Scan Parameters",
      "type": "n8n-nodes-base.code",
      "position": [
        -760,
        340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/discovery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"target_network\": \"{{ $json.target_network }}\",\n  \"scan_type\": \"{{ $json.scan_type }}\",\n  \"timeout\": {{ $json.timeout }}\n}",
        "options": {
          "timeout": 150000
        }
      },
      "id": "b1a49e81-e018-464b-9779-538d24cb06a0",
      "name": "Network Discovery",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -540,
        340
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Procesar resultados del descubrimiento - Con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en Process Discovery Results');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'No input data received in processing node',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Validar estructura de datos\nif (items.length < 2) {\n  console.error('‚ùå Datos insuficientes - se esperan 2 inputs (discovery result + config)');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Insufficient input data - expected discovery result and config',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Obtener datos de manera segura\nconst discoveryItem = items[0];\nconst configItem = items[1];\n\nif (!discoveryItem || !discoveryItem.json) {\n  console.error('‚ùå Resultado de discovery inv√°lido');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Invalid discovery result data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nif (!configItem || !configItem.json) {\n  console.error('‚ùå Configuraci√≥n inv√°lida');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Invalid configuration data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst discoveryResult = discoveryItem.json;\nconst config = configItem.json;\n\nconsole.log('üìã Procesando resultados del descubrimiento...');\n\n// Verificar si el discovery fue exitoso\nconst discoverySuccess = discoveryResult.success;\nif (discoverySuccess === false || discoverySuccess === undefined) {\n  console.error('‚ùå Error en descubrimiento:', discoveryResult.error || 'Unknown discovery error');\n  return [{\n    json: {\n      success: false,\n      phase: 'discovery_failed',\n      error: discoveryResult.error || 'Discovery failed with unknown error',\n      target_network: config.target_network || 'unknown',\n      execution_id: config.execution_id || 'error_' + Date.now(),\n      raw_discovery_result: discoveryResult\n    }\n  }];\n}\n\n// Verificar si se encontraron hosts\nconst hostsFound = discoveryResult.hosts_found || [];\nif (!Array.isArray(hostsFound) || hostsFound.length === 0) {\n  console.log('‚ö†Ô∏è No se encontraron hosts activos');\n  return [{\n    json: {\n      success: false,\n      phase: 'no_hosts_found',\n      error: 'No active hosts discovered in the target network',\n      target_network: config.target_network || 'unknown',\n      execution_id: config.execution_id || 'error_' + Date.now(),\n      raw_discovery: discoveryResult\n    }\n  }];\n}\n\nconsole.log(`‚úÖ Encontrados ${hostsFound.length} hosts activos:`, hostsFound);\n\n// Preparar datos para enumeraci√≥n\nconst hostsToEnumerate = hostsFound.slice(0, 5);\nconst hostDetails = discoveryResult.host_details || [];\n\n// Asegurar que config tiene todas las propiedades necesarias\nconst safeConfig = {\n  target_network: config.target_network || 'unknown',\n  scan_intensity: config.scan_intensity || 'medium', \n  scan_type: config.scan_type || 'ping_sweep',\n  timeout: config.timeout || 120,\n  ports: config.ports || 'top-100',\n  execution_id: config.execution_id || 'scan_' + Date.now(),\n  timestamp: config.timestamp || new Date().toISOString()\n};\n\nconst result = {\n  success: true,\n  phase: 'discovery_complete',\n  config: safeConfig,\n  hosts_discovered: hostsToEnumerate,\n  total_hosts_found: hostsFound.length,\n  hosts_to_enumerate: hostsToEnumerate.length,\n  discovery_details: Array.isArray(hostDetails) ? hostDetails : [],\n  execution_id: safeConfig.execution_id\n};\n\nconsole.log('‚úÖ Procesamiento completado exitosamente');\n\nreturn [{\n  json: result\n}];"
      },
      "id": "f19e83d1-1ea5-48f6-9419-baba2ebcd5ea",
      "name": "Process Discovery Results",
      "type": "n8n-nodes-base.code",
      "position": [
        -320,
        340
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "id": "26e1dc56-f5ed-4083-bd1e-81023b2f0247",
      "name": "Check Discovery Success",
      "type": "n8n-nodes-base.if",
      "position": [
        -100,
        340
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/enumeration",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"hosts\": {{ JSON.stringify($json.hosts_discovered) }},\n  \"ports\": \"{{ $json.config.ports }}\",\n  \"scan_type\": \"syn\",\n  \"timeout\": {{ $json.config.timeout + 60 }}\n}",
        "options": {
          "timeout": 400000
        }
      },
      "id": "3a21c98f-3835-4991-8e10-85f4f6689451",
      "name": "Port Enumeration",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        120,
        240
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Consolidar resultados finales - Con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en Generate Final Report');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'No input data received in report generation',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Validar que tenemos suficientes datos\nif (items.length < 2) {\n  console.error('‚ùå Datos insuficientes - se esperan 2 inputs');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'Insufficient input data for report generation',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst enumerationItem = items[0];\nconst discoveryItem = items[1];\n\nif (!enumerationItem?.json || !discoveryItem?.json) {\n  console.error('‚ùå Datos de entrada inv√°lidos');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'Invalid input data structures',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst enumerationResult = enumerationItem.json;\nconst discoveryData = discoveryItem.json;\n\nconsole.log('üìä Procesando resultados de enumeraci√≥n...');\n\n// Verificar √©xito de enumeraci√≥n\nif (enumerationResult.success === false) {\n  console.error('‚ùå Error en enumeraci√≥n:', enumerationResult.error);\n  return [{\n    json: {\n      success: false,\n      phase: 'enumeration_failed',\n      error: enumerationResult.error || 'Enumeration failed',\n      discovery_data: discoveryData,\n      execution_id: discoveryData.execution_id || 'error_' + Date.now()\n    }\n  }];\n}\n\n// Procesar resultados de manera segura\nconst scanResults = enumerationResult.results || [];\nconst statistics = enumerationResult.statistics || {};\n\n// An√°lisis de servicios\nconst serviceAnalysis = {\n  web_services: [],\n  database_services: [],\n  remote_access: [],\n  critical_services: [],\n  all_services: new Set()\n};\n\n// Categorizar servicios de manera segura\nif (Array.isArray(scanResults)) {\n  scanResults.forEach((hostResult) => {\n    if (hostResult?.open_ports && Array.isArray(hostResult.open_ports)) {\n      hostResult.open_ports.forEach((port) => {\n        if (port?.service) {\n          const service = port.service.toLowerCase();\n          const hostIp = hostResult.host || 'unknown';\n          const portNumber = port.port || 0;\n          const version = port.version || 'Unknown';\n\n          serviceAnalysis.all_services.add(service);\n          \n          if (['http', 'https', 'ssl/http', 'http-alt'].includes(service)) {\n            serviceAnalysis.web_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['mysql', 'postgresql', 'mssql', 'oracle', 'mongodb'].includes(service)) {\n            serviceAnalysis.database_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['ssh', 'telnet', 'rdp', 'vnc', 'ftp'].includes(service)) {\n            serviceAnalysis.remote_access.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['smb', 'netbios-ssn', 'microsoft-ds', 'ldap'].includes(service)) {\n            serviceAnalysis.critical_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n        }\n      });\n    }\n  });\n}\n\n// Obtener datos seguros\nconst config = discoveryData.config || {};\nconst executionId = discoveryData.execution_id || config.execution_id || 'report_' + Date.now();\n\n// Generar reporte ejecutivo\nconst executiveReport = {\n  scan_completed: new Date().toISOString(),\n  execution_id: executionId,\n  target_network: config.target_network || 'unknown',\n  scan_duration: `${(config.timeout || 120) + 60}s max`,\n  \n  summary: {\n    hosts_discovered: discoveryData.total_hosts_found || 0,\n    hosts_enumerated: statistics.successful_scans || 0,\n    total_open_ports: statistics.total_open_ports || 0,\n    unique_services: serviceAnalysis.all_services.size\n  },\n  \n  findings: {\n    web_services: serviceAnalysis.web_services.length,\n    database_services: serviceAnalysis.database_services.length,\n    remote_access_services: serviceAnalysis.remote_access.length,\n    critical_services: serviceAnalysis.critical_services.length\n  },\n  \n  risk_assessment: {\n    high_risk: serviceAnalysis.database_services.length + serviceAnalysis.critical_services.length,\n    medium_risk: serviceAnalysis.remote_access.length,\n    low_risk: serviceAnalysis.web_services.length,\n    total_risk_score: (serviceAnalysis.database_services.length * 3) + \n                     (serviceAnalysis.critical_services.length * 3) +\n                     (serviceAnalysis.remote_access.length * 2) +\n                     (serviceAnalysis.web_services.length * 1)\n  },\n  \n  recommendations: [\n    serviceAnalysis.web_services.length > 0 ? 'Revisar configuraci√≥n de servicios web' : null,\n    serviceAnalysis.database_services.length > 0 ? 'Asegurar bases de datos expuestas' : null,\n    serviceAnalysis.remote_access.length > 0 ? 'Verificar servicios de acceso remoto' : null,\n    serviceAnalysis.critical_services.length > 0 ? 'Revisar servicios cr√≠ticos' : null\n  ].filter(Boolean),\n  \n  next_steps: [\n    'Ejecutar an√°lisis de vulnerabilidades',\n    'Implementar hardening de servicios',\n    'Configurar monitoreo de red',\n    'Revisar pol√≠ticas de firewall'\n  ]\n};\n\nconsole.log('üìà Estad√≠sticas finales:');\nconsole.log(`   Hosts: ${discoveryData.total_hosts_found || 0}`);\nconsole.log(`   Puertos: ${statistics.total_open_ports || 0}`);\nconsole.log(`   Servicios: ${serviceAnalysis.all_services.size}`);\n\nconst finalResult = {\n  success: true,\n  phase: 'scan_complete',\n  executive_report: executiveReport,\n  detailed_results: {\n    discovery: discoveryData,\n    enumeration: enumerationResult,\n    service_analysis: {\n      web_services: serviceAnalysis.web_services,\n      database_services: serviceAnalysis.database_services,\n      remote_access: serviceAnalysis.remote_access,\n      critical_services: serviceAnalysis.critical_services,\n      all_services: Array.from(serviceAnalysis.all_services)\n    }\n  },\n  statistics: statistics,\n  execution_id: executionId\n};\n\nconsole.log('‚úÖ Reporte final generado exitosamente');\n\nreturn [{\n  json: finalResult\n}];"
      },
      "id": "b616ac2c-e410-4540-88c1-a5ceb22307cf",
      "name": "Generate Final Report",
      "type": "n8n-nodes-base.code",
      "position": [
        340,
        240
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "7d9dc077-2f64-4750-b710-8f2dc73b2476",
      "name": "Return Success Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        560,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "a28491aa-48e1-4d37-b6ee-0ff521fde277",
      "name": "Return Discovery Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        120,
        440
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9c3b06f9-353d-4e50-a3a8-7fabe050557f",
              "leftValue": "=outputType",
              "rightValue": "webhook",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        0,
        -100
      ],
      "id": "1ec06e42-522c-464c-8238-9c4a5470ec29",
      "name": "If"
    },
    {
      "parameters": {
        "url": "={{ $json.webhookUrl }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        -200
      ],
      "id": "48662b35-007d-4038-a537-dd70c18d5baf",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        220,
        -20
      ],
      "id": "bd825dcf-2a0c-4d08-8230-127a7efd6db5",
      "name": "Telegram",
      "webhookId": "f61aba17-2dc8-4222-a858-d0bd7deb6628",
      "credentials": {
        "telegramApi": {
          "id": "ktOR7YmyhzdMBJFv",
          "name": "Telegram account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Procesar chat",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar chat": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Network Scan": {
      "main": [
        [
          {
            "node": "Configure Scan Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Scan Parameters": {
      "main": [
        [
          {
            "node": "Network Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Network Discovery": {
      "main": [
        [
          {
            "node": "Process Discovery Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Discovery Results": {
      "main": [
        [
          {
            "node": "Check Discovery Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Discovery Success": {
      "main": [
        [
          {
            "node": "Port Enumeration",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Discovery Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Port Enumeration": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Final Report": {
      "main": [
        [
          {
            "node": "Return Success Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "60c50bf3-3571-4f0b-af0a-b7baa813b8a2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "39f26be3b6bd0b3f3324a878e22b2f98bd0944927e4c1d6b48a4f16326e767fa"
  },
  "id": "u8A0KnKyLKjkKmB4",
  "tags": [
    {
      "name": "security-audit-robust",
      "id": "B67rSPEXOK8Tw3Tu",
      "createdAt": "2025-05-29T14:49:51.268Z",
      "updatedAt": "2025-05-29T14:49:51.268Z"
    },
    {
      "name": "error-handling",
      "id": "4zjnO6GHNJ16ujME",
      "createdAt": "2025-05-29T14:49:51.276Z",
      "updatedAt": "2025-05-29T14:49:51.276Z"
    }
  ]
}