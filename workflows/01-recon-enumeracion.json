{
  "name": "Security Audit - Complete Scan (ROBUST)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET,POST",
        "path": "scan-network",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "webhook-trigger",
      "name": "Start Network Scan",
      "type": "n8n-nodes-base.webhook",
      "position": [500, 300],
      "webhookId": "scan-network-webhook-robust",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// Configurar par√°metros del escaneo - Compatible GET/POST con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en el nodo');\n  return [{\n    json: {\n      error: 'No input data received',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Obtener datos de manera segura\nconst inputData = items[0];\nif (!inputData || !inputData.json) {\n  console.error('‚ùå Datos de entrada inv√°lidos');\n  return [{\n    json: {\n      error: 'Invalid input data structure',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nconst data = inputData.json;\n\n// Extraer par√°metros de diferentes fuentes de manera segura\nconst body = data.body || {};\nconst query = data.query || {};\nconst headers = data.headers || {};\n\nconsole.log('Datos recibidos - Body:', JSON.stringify(body));\nconsole.log('Datos recibidos - Query:', JSON.stringify(query));\n\n// Determinar fuente de par√°metros\nlet params = {};\n\n// Priorizar body si existe (POST)\nif (body && typeof body === 'object' && Object.keys(body).length > 0) {\n  params = body;\n  console.log('‚úÖ Usando par√°metros del body (POST)');\n} \n// Usar query si existe (GET)\nelse if (query && typeof query === 'object' && Object.keys(query).length > 0) {\n  params = query;\n  console.log('‚úÖ Usando par√°metros de query (GET)');\n} \n// Fallback: usar datos directos del webhook\nelse if (data && typeof data === 'object') {\n  params = data;\n  console.log('‚úÖ Usando datos directos del webhook');\n} \n// √öltima opci√≥n: valores por defecto\nelse {\n  console.log('‚ö†Ô∏è No se encontraron par√°metros, usando valores por defecto');\n  params = {};\n}\n\n// Configuraci√≥n del escaneo con valores por defecto seguros\nconst config = {\n  target_network: params.target_network || params.target || '127.0.0.1',\n  scan_intensity: params.scan_intensity || params.intensity || 'medium',\n  scan_type: params.scan_type || params.type || 'ping_sweep',\n  timeout: parseInt(params.timeout) || 120,\n  execution_id: 'scan_' + Date.now(),\n  timestamp: new Date().toISOString()\n};\n\n// Validar que target_network es v√°lido\nif (!config.target_network || config.target_network.trim() === '') {\n  config.target_network = '127.0.0.1';\n  console.log('‚ö†Ô∏è Target network vac√≠o, usando 127.0.0.1');\n}\n\n// Validar timeout\nif (config.timeout < 10 || config.timeout > 600) {\n  config.timeout = 120;\n  console.log('‚ö†Ô∏è Timeout fuera de rango, usando 120 segundos');\n}\n\n// Mapear intensidad a configuraci√≥n\nconst intensityMap = {\n  low: { scan_type: 'ping_sweep', timeout: 60, ports: 'top-20' },\n  medium: { scan_type: 'ping_sweep', timeout: 120, ports: 'top-100' },\n  high: { scan_type: 'arp_scan', timeout: 180, ports: 'top-1000' }\n};\n\nconst intensity = intensityMap[config.scan_intensity] || intensityMap.medium;\nconfig.scan_type = intensity.scan_type;\nconfig.timeout = Math.max(config.timeout, intensity.timeout);\nconfig.ports = intensity.ports;\n\nconsole.log('‚úÖ Configuraci√≥n final v√°lida:', JSON.stringify(config));\n\nreturn [{\n  json: config\n}];"
      },
      "id": "configure-params",
      "name": "Configure Scan Parameters",
      "type": "n8n-nodes-base.code",
      "position": [720, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/discovery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"target_network\": \"{{ $json.target_network }}\",\n  \"scan_type\": \"{{ $json.scan_type }}\",\n  \"timeout\": {{ $json.timeout }}\n}",
        "options": {
          "timeout": 150000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "network-discovery",
      "name": "Network Discovery",
      "type": "n8n-nodes-base.httpRequest",
      "position": [940, 300],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Procesar resultados del descubrimiento - Con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en Process Discovery Results');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'No input data received in processing node',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Validar estructura de datos\nif (items.length < 2) {\n  console.error('‚ùå Datos insuficientes - se esperan 2 inputs (discovery result + config)');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Insufficient input data - expected discovery result and config',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Obtener datos de manera segura\nconst discoveryItem = items[0];\nconst configItem = items[1];\n\nif (!discoveryItem || !discoveryItem.json) {\n  console.error('‚ùå Resultado de discovery inv√°lido');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Invalid discovery result data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nif (!configItem || !configItem.json) {\n  console.error('‚ùå Configuraci√≥n inv√°lida');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'Invalid configuration data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst discoveryResult = discoveryItem.json;\nconst config = configItem.json;\n\nconsole.log('üìã Procesando resultados del descubrimiento...');\n\n// Verificar si el discovery fue exitoso\nconst discoverySuccess = discoveryResult.success;\nif (discoverySuccess === false || discoverySuccess === undefined) {\n  console.error('‚ùå Error en descubrimiento:', discoveryResult.error || 'Unknown discovery error');\n  return [{\n    json: {\n      success: false,\n      phase: 'discovery_failed',\n      error: discoveryResult.error || 'Discovery failed with unknown error',\n      target_network: config.target_network || 'unknown',\n      execution_id: config.execution_id || 'error_' + Date.now(),\n      raw_discovery_result: discoveryResult\n    }\n  }];\n}\n\n// Verificar si se encontraron hosts\nconst hostsFound = discoveryResult.hosts_found || [];\nif (!Array.isArray(hostsFound) || hostsFound.length === 0) {\n  console.log('‚ö†Ô∏è No se encontraron hosts activos');\n  return [{\n    json: {\n      success: false,\n      phase: 'no_hosts_found',\n      error: 'No active hosts discovered in the target network',\n      target_network: config.target_network || 'unknown',\n      execution_id: config.execution_id || 'error_' + Date.now(),\n      raw_discovery: discoveryResult\n    }\n  }];\n}\n\nconsole.log(`‚úÖ Encontrados ${hostsFound.length} hosts activos:`, hostsFound);\n\n// Preparar datos para enumeraci√≥n\nconst hostsToEnumerate = hostsFound.slice(0, 5);\nconst hostDetails = discoveryResult.host_details || [];\n\n// Asegurar que config tiene todas las propiedades necesarias\nconst safeConfig = {\n  target_network: config.target_network || 'unknown',\n  scan_intensity: config.scan_intensity || 'medium', \n  scan_type: config.scan_type || 'ping_sweep',\n  timeout: config.timeout || 120,\n  ports: config.ports || 'top-100',\n  execution_id: config.execution_id || 'scan_' + Date.now(),\n  timestamp: config.timestamp || new Date().toISOString()\n};\n\nconst result = {\n  success: true,\n  phase: 'discovery_complete',\n  config: safeConfig,\n  hosts_discovered: hostsToEnumerate,\n  total_hosts_found: hostsFound.length,\n  hosts_to_enumerate: hostsToEnumerate.length,\n  discovery_details: Array.isArray(hostDetails) ? hostDetails : [],\n  execution_id: safeConfig.execution_id\n};\n\nconsole.log('‚úÖ Procesamiento completado exitosamente');\n\nreturn [{\n  json: result\n}];"
      },
      "id": "process-discovery",
      "name": "Process Discovery Results",
      "type": "n8n-nodes-base.code",
      "position": [1160, 300],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "id": "check-success",
      "name": "Check Discovery Success",
      "type": "n8n-nodes-base.if",
      "position": [1380, 300],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/enumeration",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"hosts\": {{ JSON.stringify($json.hosts_discovered) }},\n  \"ports\": \"{{ $json.config.ports }}\",\n  \"scan_type\": \"syn\",\n  \"timeout\": {{ $json.config.timeout + 60 }}\n}",
        "options": {
          "timeout": 400000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "port-enumeration",
      "name": "Port Enumeration",
      "type": "n8n-nodes-base.httpRequest",
      "position": [1600, 200],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Consolidar resultados finales - Con validaci√≥n robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('‚ùå No hay datos de entrada en Generate Final Report');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'No input data received in report generation',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Validar que tenemos suficientes datos\nif (items.length < 2) {\n  console.error('‚ùå Datos insuficientes - se esperan 2 inputs');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'Insufficient input data for report generation',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst enumerationItem = items[0];\nconst discoveryItem = items[1];\n\nif (!enumerationItem?.json || !discoveryItem?.json) {\n  console.error('‚ùå Datos de entrada inv√°lidos');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'Invalid input data structures',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nconst enumerationResult = enumerationItem.json;\nconst discoveryData = discoveryItem.json;\n\nconsole.log('üìä Procesando resultados de enumeraci√≥n...');\n\n// Verificar √©xito de enumeraci√≥n\nif (enumerationResult.success === false) {\n  console.error('‚ùå Error en enumeraci√≥n:', enumerationResult.error);\n  return [{\n    json: {\n      success: false,\n      phase: 'enumeration_failed',\n      error: enumerationResult.error || 'Enumeration failed',\n      discovery_data: discoveryData,\n      execution_id: discoveryData.execution_id || 'error_' + Date.now()\n    }\n  }];\n}\n\n// Procesar resultados de manera segura\nconst scanResults = enumerationResult.results || [];\nconst statistics = enumerationResult.statistics || {};\n\n// An√°lisis de servicios\nconst serviceAnalysis = {\n  web_services: [],\n  database_services: [],\n  remote_access: [],\n  critical_services: [],\n  all_services: new Set()\n};\n\n// Categorizar servicios de manera segura\nif (Array.isArray(scanResults)) {\n  scanResults.forEach((hostResult) => {\n    if (hostResult?.open_ports && Array.isArray(hostResult.open_ports)) {\n      hostResult.open_ports.forEach((port) => {\n        if (port?.service) {\n          const service = port.service.toLowerCase();\n          const hostIp = hostResult.host || 'unknown';\n          const portNumber = port.port || 0;\n          const version = port.version || 'Unknown';\n\n          serviceAnalysis.all_services.add(service);\n          \n          if (['http', 'https', 'ssl/http', 'http-alt'].includes(service)) {\n            serviceAnalysis.web_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['mysql', 'postgresql', 'mssql', 'oracle', 'mongodb'].includes(service)) {\n            serviceAnalysis.database_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['ssh', 'telnet', 'rdp', 'vnc', 'ftp'].includes(service)) {\n            serviceAnalysis.remote_access.push({ host: hostIp, port: portNumber, service, version });\n          }\n          if (['smb', 'netbios-ssn', 'microsoft-ds', 'ldap'].includes(service)) {\n            serviceAnalysis.critical_services.push({ host: hostIp, port: portNumber, service, version });\n          }\n        }\n      });\n    }\n  });\n}\n\n// Obtener datos seguros\nconst config = discoveryData.config || {};\nconst executionId = discoveryData.execution_id || config.execution_id || 'report_' + Date.now();\n\n// Generar reporte ejecutivo\nconst executiveReport = {\n  scan_completed: new Date().toISOString(),\n  execution_id: executionId,\n  target_network: config.target_network || 'unknown',\n  scan_duration: `${(config.timeout || 120) + 60}s max`,\n  \n  summary: {\n    hosts_discovered: discoveryData.total_hosts_found || 0,\n    hosts_enumerated: statistics.successful_scans || 0,\n    total_open_ports: statistics.total_open_ports || 0,\n    unique_services: serviceAnalysis.all_services.size\n  },\n  \n  findings: {\n    web_services: serviceAnalysis.web_services.length,\n    database_services: serviceAnalysis.database_services.length,\n    remote_access_services: serviceAnalysis.remote_access.length,\n    critical_services: serviceAnalysis.critical_services.length\n  },\n  \n  risk_assessment: {\n    high_risk: serviceAnalysis.database_services.length + serviceAnalysis.critical_services.length,\n    medium_risk: serviceAnalysis.remote_access.length,\n    low_risk: serviceAnalysis.web_services.length,\n    total_risk_score: (serviceAnalysis.database_services.length * 3) + \n                     (serviceAnalysis.critical_services.length * 3) +\n                     (serviceAnalysis.remote_access.length * 2) +\n                     (serviceAnalysis.web_services.length * 1)\n  },\n  \n  recommendations: [\n    serviceAnalysis.web_services.length > 0 ? 'Revisar configuraci√≥n de servicios web' : null,\n    serviceAnalysis.database_services.length > 0 ? 'Asegurar bases de datos expuestas' : null,\n    serviceAnalysis.remote_access.length > 0 ? 'Verificar servicios de acceso remoto' : null,\n    serviceAnalysis.critical_services.length > 0 ? 'Revisar servicios cr√≠ticos' : null\n  ].filter(Boolean),\n  \n  next_steps: [\n    'Ejecutar an√°lisis de vulnerabilidades',\n    'Implementar hardening de servicios',\n    'Configurar monitoreo de red',\n    'Revisar pol√≠ticas de firewall'\n  ]\n};\n\nconsole.log('üìà Estad√≠sticas finales:');\nconsole.log(`   Hosts: ${discoveryData.total_hosts_found || 0}`);\nconsole.log(`   Puertos: ${statistics.total_open_ports || 0}`);\nconsole.log(`   Servicios: ${serviceAnalysis.all_services.size}`);\n\nconst finalResult = {\n  success: true,\n  phase: 'scan_complete',\n  executive_report: executiveReport,\n  detailed_results: {\n    discovery: discoveryData,\n    enumeration: enumerationResult,\n    service_analysis: {\n      web_services: serviceAnalysis.web_services,\n      database_services: serviceAnalysis.database_services,\n      remote_access: serviceAnalysis.remote_access,\n      critical_services: serviceAnalysis.critical_services,\n      all_services: Array.from(serviceAnalysis.all_services)\n    }\n  },\n  statistics: statistics,\n  execution_id: executionId\n};\n\nconsole.log('‚úÖ Reporte final generado exitosamente');\n\nreturn [{\n  json: finalResult\n}];"
      },
      "id": "generate-report",
      "name": "Generate Final Report",
      "type": "n8n-nodes-base.code",
      "position": [1820, 200],
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "return-success",
      "name": "Return Success Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [2040, 200],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "return-error",
      "name": "Return Discovery Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [1600, 400],
      "typeVersion": 1
    }
  ],
  "connections": {
    "Start Network Scan": {
      "main": [
        [
          {
            "node": "Configure Scan Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Scan Parameters": {
      "main": [
        [
          {
            "node": "Network Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Network Discovery": {
      "main": [
        [
          {
            "node": "Process Discovery Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Discovery Results": {
      "main": [
        [
          {
            "node": "Check Discovery Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Discovery Success": {
      "main": [
        [
          {
            "node": "Port Enumeration",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Discovery Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Port Enumeration": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Final Report": {
      "main": [
        [
          {
            "node": "Return Success Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "security-audit-robust",
      "name": "security-audit-robust"
    },
    {
      "id": "error-handling",
      "name": "error-handling"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-05-28T15:15:00.000Z",
  "versionId": "5"
}
