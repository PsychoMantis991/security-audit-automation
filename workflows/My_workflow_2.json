{
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "GET,POST",
        "path": "scan-network",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "df886a18-fd51-4ee9-8837-590661c21584",
      "name": "Start Network Scan",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -2000,
        360
      ],
      "webhookId": "scan-network-webhook-robust",
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// Configurar parámetros del escaneo - Compatible GET/POST con validación robusta\n\n// Validar que tenemos datos de entrada\nif (!items || items.length === 0) {\n  console.error('❌ No hay datos de entrada en el nodo');\n  return [{\n    json: {\n      error: 'No input data received',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Obtener datos de manera segura\nconst inputData = items[0];\nif (!inputData || !inputData.json) {\n  console.error('❌ Datos de entrada inválidos');\n  return [{\n    json: {\n      error: 'Invalid input data structure',\n      target_network: '127.0.0.1',\n      scan_intensity: 'medium',\n      scan_type: 'ping_sweep',\n      timeout: 120,\n      execution_id: 'scan_' + Date.now(),\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\nconst data = inputData.json;\n\n// Extraer parámetros de diferentes fuentes de manera segura\nconst body = data.body || {};\nconst query = data.query || {};\nconst headers = data.headers || {};\n\nconsole.log('Datos recibidos - Body:', JSON.stringify(body));\nconsole.log('Datos recibidos - Query:', JSON.stringify(query));\n\n// Determinar fuente de parámetros\nlet params = {};\n\n// Priorizar body si existe (POST)\nif (body && typeof body === 'object' && Object.keys(body).length > 0) {\n  params = body;\n  console.log('✅ Usando parámetros del body (POST)');\n} \n// Usar query si existe (GET)\nelse if (query && typeof query === 'object' && Object.keys(query).length > 0) {\n  params = query;\n  console.log('✅ Usando parámetros de query (GET)');\n} \n// Fallback: usar datos directos del webhook\nelse if (data && typeof data === 'object') {\n  params = data;\n  console.log('✅ Usando datos directos del webhook');\n} \n// Última opción: valores por defecto\nelse {\n  console.log('⚠️ No se encontraron parámetros, usando valores por defecto');\n  params = {};\n}\n\n// Configuración del escaneo con valores por defecto seguros\nconst config = {\n  target_network: params.target_network || params.target || '127.0.0.1',\n  scan_intensity: params.scan_intensity || params.intensity || 'medium',\n  scan_type: params.scan_type || params.type || 'ping_sweep',\n  timeout: parseInt(params.timeout) || 120,\n  execution_id: 'scan_' + Date.now(),\n  timestamp: new Date().toISOString()\n};\n\n// Validar que target_network es válido\nif (!config.target_network || config.target_network.trim() === '') {\n  config.target_network = '127.0.0.1';\n  console.log('⚠️ Target network vacío, usando 127.0.0.1');\n}\n\n// Validar timeout\nif (config.timeout < 10 || config.timeout > 600) {\n  config.timeout = 120;\n  console.log('⚠️ Timeout fuera de rango, usando 120 segundos');\n}\n\n// Mapear intensidad a configuración\nconst intensityMap = {\n  low: { scan_type: 'ping_sweep', timeout: 60, ports: 'top-20' },\n  medium: { scan_type: 'ping_sweep', timeout: 120, ports: 'top-100' },\n  high: { scan_type: 'arp_scan', timeout: 180, ports: 'top-1000' }\n};\n\nconst intensity = intensityMap[config.scan_intensity] || intensityMap.medium;\nconfig.scan_type = intensity.scan_type;\nconfig.timeout = Math.max(config.timeout, intensity.timeout);\nconfig.ports = intensity.ports;\n\nconsole.log('✅ Configuración final válida:', JSON.stringify(config));\n\nreturn [{\n  json: config\n}];"
      },
      "id": "47072cfb-5156-4f56-8a95-28653de033aa",
      "name": "Configure Scan Parameters",
      "type": "n8n-nodes-base.code",
      "position": [
        -1780,
        360
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/discovery",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"target_network\": \"{{ $json.target_network }}\",\n  \"scan_type\": \"{{ $json.scan_type }}\",\n  \"timeout\": {{ $json.timeout }}\n}",
        "options": {
          "timeout": 150000
        }
      },
      "id": "a03f446b-0c5e-4dfa-92d0-46e7d80dbf1c",
      "name": "Network Discovery",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -1560,
        360
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Procesar resultados del descubrimiento - Versión simple\nconsole.log('=== Iniciando Process Discovery Results ===');\n\n// Validar entrada básica\nif (!items || items.length === 0) {\n  console.error('No hay datos de entrada');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed',\n      error: 'No input data received',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\n// Obtener primer item\nvar inputItem = items[0];\nif (!inputItem || !inputItem.json) {\n  console.error('Datos de entrada inválidos');\n  return [{\n    json: {\n      success: false,\n      phase: 'processing_failed', \n      error: 'Invalid input data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nvar inputData = inputItem.json;\nconsole.log('Datos recibidos:', Object.keys(inputData));\n\n// Extraer datos del discovery\nvar discoveryResult = inputData;\nvar config = {\n  target_network: inputData.target_network || '127.0.0.1',\n  scan_intensity: 'medium',\n  scan_type: inputData.scan_type || 'ping_sweep',\n  timeout: inputData.timeout || 120,\n  ports: 'top-100',\n  execution_id: 'scan_' + Date.now(),\n  timestamp: new Date().toISOString()\n};\n\n// Verificar si discovery fue exitoso\nif (discoveryResult.success === false) {\n  console.error('Error en descubrimiento:', discoveryResult.error);\n  return [{\n    json: {\n      success: false,\n      phase: 'discovery_failed',\n      error: discoveryResult.error || 'Discovery failed',\n      target_network: config.target_network,\n      execution_id: config.execution_id\n    }\n  }];\n}\n\n// Verificar hosts encontrados\nvar hostsFound = discoveryResult.hosts_found || [];\nif (!Array.isArray(hostsFound) || hostsFound.length === 0) {\n  console.log('No se encontraron hosts activos');\n  return [{\n    json: {\n      success: false,\n      phase: 'no_hosts_found',\n      error: 'No active hosts discovered',\n      target_network: config.target_network,\n      execution_id: config.execution_id\n    }\n  }];\n}\n\nconsole.log('Encontrados ' + hostsFound.length + ' hosts activos');\n\n// Preparar datos para enumeración\nvar hostsToEnumerate = hostsFound.slice(0, 5);\nvar hostDetails = discoveryResult.host_details || [];\n\n// Resultado final\nvar result = {\n  success: true,\n  phase: 'discovery_complete',\n  config: config,\n  hosts_discovered: hostsToEnumerate,\n  total_hosts_found: hostsFound.length,\n  hosts_to_enumerate: hostsToEnumerate.length,\n  discovery_details: hostDetails,\n  execution_id: config.execution_id\n};\n\nconsole.log('Procesamiento completado exitosamente');\nconsole.log('Hosts para enumerar: ' + hostsToEnumerate.length);\n\nreturn [{ json: result }];"
      },
      "id": "788da1e8-4290-435f-b867-0b010599fc7a",
      "name": "Process Discovery Results",
      "type": "n8n-nodes-base.code",
      "position": [
        -1340,
        360
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success }}",
              "value2": true
            }
          ]
        }
      },
      "id": "2ccae9a2-5ac4-4aab-8069-460f9893c94a",
      "name": "Check Discovery Success",
      "type": "n8n-nodes-base.if",
      "position": [
        -1120,
        360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://kali:8080/api/enumeration",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"hosts\": {{ JSON.stringify($json.hosts_discovered) }},\n  \"ports\": \"{{ $json.config.ports }}\",\n  \"scan_type\": \"syn\",\n  \"timeout\": {{ $json.config.timeout + 60 }}\n}",
        "options": {
          "timeout": 400000
        }
      },
      "id": "fd4819fa-c6fb-4b0b-b31f-884bd14990e4",
      "name": "Port Enumeration",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -900,
        260
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Generate Final Report - Versión simple\nconsole.log('=== Iniciando Generate Final Report ===');\n\n// Validar entrada básica\nif (!items || items.length === 0) {\n  console.error('No hay datos de entrada');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'No input data received',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nvar inputItem = items[0];\nif (!inputItem || !inputItem.json) {\n  console.error('Datos de entrada inválidos');\n  return [{\n    json: {\n      success: false,\n      phase: 'report_generation_failed',\n      error: 'Invalid input data',\n      execution_id: 'error_' + Date.now()\n    }\n  }];\n}\n\nvar inputData = inputItem.json;\nconsole.log('Datos recibidos:', Object.keys(inputData));\n\n// El input puede ser el resultado de enumeration directamente\n// o datos ya procesados que contengan tanto enumeration como discovery\nvar enumerationResult = {};\nvar discoveryData = {};\nvar config = {};\n\n// Caso 1: Datos vienen directamente del HTTP Request (Port Enumeration)\nif (inputData.success !== undefined && inputData.results !== undefined) {\n  // Este ES el resultado de enumeration\n  enumerationResult = inputData;\n  \n  // Crear datos básicos de discovery y config\n  discoveryData = {\n    total_hosts_found: 1,\n    execution_id: 'scan_' + Date.now()\n  };\n  \n  config = {\n    target_network: '127.0.0.1',\n    scan_intensity: 'medium',\n    timeout: 120,\n    ports: 'top-100'\n  };\n  \n  console.log('Detectado resultado directo de Port Enumeration');\n}\n// Caso 2: Datos ya procesados que contienen discovery info\nelse if (inputData.config && inputData.hosts_discovered) {\n  // Los datos vienen del nodo anterior con info de discovery\n  discoveryData = inputData;\n  config = inputData.config;\n  \n  // Crear enumeration result básico si no existe\n  enumerationResult = {\n    success: true,\n    results: [],\n    statistics: {\n      total_hosts: inputData.hosts_to_enumerate || 0,\n      successful_scans: 0,\n      total_open_ports: 0\n    }\n  };\n  \n  console.log('Detectados datos de discovery procesados');\n}\n// Caso 3: Fallback\nelse {\n  console.log('Usando datos de fallback');\n  enumerationResult = {\n    success: true,\n    results: [],\n    statistics: { total_hosts: 0, successful_scans: 0, total_open_ports: 0 }\n  };\n  discoveryData = { total_hosts_found: 0, execution_id: 'scan_' + Date.now() };\n  config = { target_network: '127.0.0.1', scan_intensity: 'medium' };\n}\n\n// Verificar éxito de enumeración\nif (enumerationResult.success === false) {\n  console.error('Error en enumeración:', enumerationResult.error);\n  return [{\n    json: {\n      success: false,\n      phase: 'enumeration_failed',\n      error: enumerationResult.error || 'Enumeration failed',\n      discovery_data: discoveryData,\n      execution_id: discoveryData.execution_id || 'error_' + Date.now()\n    }\n  }];\n}\n\n// Procesar resultados de manera segura\nvar scanResults = enumerationResult.results || [];\nvar statistics = enumerationResult.statistics || {};\n\n// Análisis básico de servicios\nvar webServices = [];\nvar databaseServices = [];\nvar remoteAccess = [];\nvar criticalServices = [];\nvar allServices = [];\n\n// Procesar cada resultado de host\nfor (var i = 0; i < scanResults.length; i++) {\n  var hostResult = scanResults[i];\n  if (hostResult && hostResult.open_ports) {\n    var openPorts = hostResult.open_ports;\n    \n    for (var j = 0; j < openPorts.length; j++) {\n      var port = openPorts[j];\n      if (port && port.service) {\n        var service = port.service.toLowerCase();\n        var hostIp = hostResult.host || 'unknown';\n        var portNumber = port.port || 0;\n        var version = port.version || 'Unknown';\n        \n        // Agregar a servicios únicos\n        if (allServices.indexOf(service) === -1) {\n          allServices.push(service);\n        }\n        \n        // Categorizar servicios\n        if (service === 'http' || service === 'https') {\n          webServices.push({\n            host: hostIp,\n            port: portNumber,\n            service: service,\n            version: version\n          });\n        }\n        \n        if (service === 'mysql' || service === 'postgresql' || service === 'mssql') {\n          databaseServices.push({\n            host: hostIp,\n            port: portNumber,\n            service: service,\n            version: version\n          });\n        }\n        \n        if (service === 'ssh' || service === 'telnet' || service === 'rdp') {\n          remoteAccess.push({\n            host: hostIp,\n            port: portNumber,\n            service: service,\n            version: version\n          });\n        }\n        \n        if (service === 'smb' || service === 'ldap') {\n          criticalServices.push({\n            host: hostIp,\n            port: portNumber,\n            service: service,\n            version: version\n          });\n        }\n      }\n    }\n  }\n}\n\n// Generar reporte ejecutivo\nvar executionId = discoveryData.execution_id || config.execution_id || 'report_' + Date.now();\n\nvar executiveReport = {\n  scan_completed: new Date().toISOString(),\n  execution_id: executionId,\n  target_network: config.target_network || 'unknown',\n  scan_duration: (config.timeout || 120) + 's max',\n  \n  summary: {\n    hosts_discovered: discoveryData.total_hosts_found || 0,\n    hosts_enumerated: statistics.successful_scans || 0,\n    total_open_ports: statistics.total_open_ports || 0,\n    unique_services: allServices.length\n  },\n  \n  findings: {\n    web_services: webServices.length,\n    database_services: databaseServices.length,\n    remote_access_services: remoteAccess.length,\n    critical_services: criticalServices.length\n  },\n  \n  risk_assessment: {\n    high_risk: databaseServices.length + criticalServices.length,\n    medium_risk: remoteAccess.length,\n    low_risk: webServices.length,\n    total_risk_score: (databaseServices.length * 3) + (criticalServices.length * 3) + (remoteAccess.length * 2) + (webServices.length * 1)\n  }\n};\n\nvar recommendations = [];\nif (webServices.length > 0) recommendations.push('Revisar configuración de servicios web');\nif (databaseServices.length > 0) recommendations.push('Asegurar bases de datos expuestas');\nif (remoteAccess.length > 0) recommendations.push('Verificar servicios de acceso remoto');\nif (criticalServices.length > 0) recommendations.push('Revisar servicios críticos');\n\nexecutiveReport.recommendations = recommendations;\n\n// Resultado final\nvar finalResult = {\n  success: true,\n  phase: 'scan_complete',\n  executive_report: executiveReport,\n  detailed_results: {\n    discovery: discoveryData,\n    enumeration: enumerationResult,\n    service_analysis: {\n      web_services: webServices,\n      database_services: databaseServices,\n      remote_access: remoteAccess,\n      critical_services: criticalServices,\n      all_services: allServices\n    }\n  },\n  statistics: statistics,\n  execution_id: executionId\n};\n\nconsole.log('Reporte final generado exitosamente');\nconsole.log('Hosts: ' + (discoveryData.total_hosts_found || 0));\nconsole.log('Puertos: ' + (statistics.total_open_ports || 0));\nconsole.log('Servicios: ' + allServices.length);\n\nreturn [{ json: finalResult }];"
      },
      "id": "023ff054-bbaf-47d8-be37-a0cb52bec258",
      "name": "Generate Final Report",
      "type": "n8n-nodes-base.code",
      "position": [
        -680,
        260
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "c1989f74-74c5-4c85-95d1-95143edfdc6a",
      "name": "Return Success Results",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -460,
        260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "4be9ee99-e80e-4417-9990-5613252a15df",
      "name": "Return Discovery Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        -900,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://brief-woman-93.webhook.cool/",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -460,
        100
      ],
      "id": "1b70cb1f-b3b0-4b6b-baf0-2895806bf1ab",
      "name": "HTTP Request"
    }
  ],
  "pinData": {},
  "connections": {
    "Start Network Scan": {
      "main": [
        [
          {
            "node": "Configure Scan Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Scan Parameters": {
      "main": [
        [
          {
            "node": "Network Discovery",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Network Discovery": {
      "main": [
        [
          {
            "node": "Process Discovery Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Discovery Results": {
      "main": [
        [
          {
            "node": "Check Discovery Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Discovery Success": {
      "main": [
        [
          {
            "node": "Port Enumeration",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return Discovery Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Port Enumeration": {
      "main": [
        [
          {
            "node": "Generate Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Final Report": {
      "main": [
        [
          {
            "node": "Return Success Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return Success Results": {
      "main": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "68293e85-11bb-49ae-beba-369fd0644e98",
  "meta": {
    "instanceId": "e2331181a8045654067937cc458fef29be3859666c3efe8179fad96471be9ecf"
  },
  "id": "4AyC2eN1Xp0eQOWI",
  "tags": [
    {
      "createdAt": "2025-05-27T16:12:37.435Z",
      "updatedAt": "2025-05-27T16:12:37.435Z",
      "id": "U6QgFfMVBTrO9I0l",
      "name": "discovery"
    },
    {
      "createdAt": "2025-05-27T16:12:37.444Z",
      "updatedAt": "2025-05-27T16:12:37.444Z",
      "id": "fVyQIFujqyjpq1nQ",
      "name": "enumeration"
    },
    {
      "createdAt": "2025-05-27T16:26:34.134Z",
      "updatedAt": "2025-05-27T16:26:34.134Z",
      "id": "pLnQOFkjMIP35VjP",
      "name": "complete-audit"
    },
    {
      "name": "network-audit",
      "id": "t7OKKXd1bONC5zH7",
      "createdAt": "2025-05-28T14:57:32.572Z",
      "updatedAt": "2025-05-28T14:57:32.572Z"
    },
    {
      "name": "docker-optimized",
      "id": "pm56i63eXuqOHRgY",
      "createdAt": "2025-05-28T14:57:32.585Z",
      "updatedAt": "2025-05-28T14:57:32.585Z"
    },
    {
      "name": "get-post-compatible",
      "id": "WN6mYWhtsMuBOtMo",
      "createdAt": "2025-05-28T14:57:32.585Z",
      "updatedAt": "2025-05-28T14:57:32.585Z"
    },
    {
      "name": "security-audit",
      "id": "nNJMSRUtv4c0oxQb",
      "createdAt": "2025-05-28T15:04:25.412Z",
      "updatedAt": "2025-05-28T15:04:25.412Z"
    },
    {
      "name": "fixed-405-error",
      "id": "NicTZi3AiDwZnCgn",
      "createdAt": "2025-05-28T15:04:25.420Z",
      "updatedAt": "2025-05-28T15:04:25.420Z"
    },
    {
      "name": "security-audit-robust",
      "id": "Sfml9fLrSF8hvCmY",
      "createdAt": "2025-05-28T15:11:46.474Z",
      "updatedAt": "2025-05-28T15:11:46.474Z"
    },
    {
      "name": "error-handling",
      "id": "5kYMlCNIEeI9mWHv",
      "createdAt": "2025-05-28T15:11:46.466Z",
      "updatedAt": "2025-05-28T15:11:46.466Z"
    }
  ]
}