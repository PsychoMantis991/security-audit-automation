FROM kalilinux/kali-rolling:latest
ENV DEBIAN_FRONTEND=noninteractive

# Instalaci√≥n de herramientas esenciales + dependencias para Go y compilaci√≥n
RUN apt-get update && apt-get install -y \
    python3 python3-pip python3-venv \
    git curl wget \
    nmap masscan \
    metasploit-framework \
    exploitdb \
    nikto \
    dirb gobuster \
    hydra \
    sqlmap \
    hashcat john \
    proxychains4 tor \
    openssh-server \
    netcat-traditional socat \
    jq nano vim \
    iputils-ping dnsutils \
    net-tools iproute2 \
    ncat \
    whois \
    libpcap-dev \
    gcc \
    build-essential \
    libc6-dev \
    supervisor \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Instalaci√≥n de Go para Nuclei y otras herramientas
RUN apt-get update && apt-get install -y golang-go && apt-get clean

# Configurar variables de entorno de Go
ENV GOPATH=/root/go
ENV PATH=$PATH:/root/go/bin

# Configurar Go proxy
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org

# Configurar Git para evitar warnings
RUN git config --global user.email "docker@kali.local" && \
    git config --global user.name "Kali Docker Build"

# Instalaci√≥n de Nuclei
RUN go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest

# Instalaci√≥n de herramientas adicionales desde Go (una por una para mejor debugging)
RUN go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest

RUN go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest

# Instalar naabu (la que causaba problemas) - ahora deber√≠a funcionar con libpcap-dev
RUN go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest

# Creaci√≥n de directorios de trabajo
RUN mkdir -p /opt/pentest/{scripts,reports,config,temp,tools}

# Descarga de LinPEAS y WinPEAS
RUN mkdir -p /opt/pentest/tools/PEASS-ng && \
    git clone --depth 1 https://github.com/carlospolop/PEASS-ng.git /opt/pentest/tools/PEASS-ng

# Instalar algunos paquetes Python desde repositorios de Kali (m√°s estables)
RUN apt-get update && apt-get install -y \
    python3-requests \
    python3-scapy \
    python3-cryptography \
    python3-paramiko \
    python3-yaml \
    python3-bs4 \
    python3-numpy \
    python3-pandas \
    python3-sqlalchemy \
    python3-redis \
    python3-dotenv \
    python3-flask \
    python3-flask-cors \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Instalaci√≥n directa de paquetes Python espec√≠ficos para pentesting (√∫ltimas versiones)
WORKDIR /opt/pentest

# Instalar paquetes espec√≠ficos de pentesting que no est√°n en repos de Kali
# Excluimos cryptography porque ya est√° instalado desde repos
RUN pip3 install --no-cache-dir --break-system-packages \
    python-nmap \
    python-masscan \
    pymetasploit3 \
    python-libnmap \
    schedule \
    colorama \
    psycopg2-binary \
    gunicorn

# Instalar impacket por separado para evitar conflictos con cryptography
RUN pip3 install --no-cache-dir --break-system-packages --no-deps impacket && \
    pip3 install --no-cache-dir --break-system-packages \
    flask \
    ldap3 \
    ldapdomaindump \
    pyasn1 \
    pycryptodomex \
    pyOpenSSL \
    six \
    dnspython

# Crear el servicio API Flask
COPY <<EOF /opt/pentest/api_server.py
#!/usr/bin/env python3
import os
import json
import subprocess
import threading
import time
from flask import Flask, request, jsonify
from flask_cors import CORS
import logging

app = Flask(__name__)
CORS(app)

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@app.route('/api/discovery', methods=['POST'])
def network_discovery():
    try:
        data = request.get_json()
        target_network = data.get('target_network', '127.0.0.1')
        scan_type = data.get('scan_type', 'ping_sweep')
        timeout = data.get('timeout', 120)
        
        logger.info(f"üîç Iniciando descubrimiento de red: {target_network}")
        
        # Ejecutar nmap para descubrimiento
        if scan_type == 'ping_sweep':
            cmd = f"nmap -sn {target_network}"
        elif scan_type == 'arp_scan':
            cmd = f"nmap -sn -PR {target_network}"
        else:
            cmd = f"nmap -sn {target_network}"
            
        logger.info(f"Ejecutando: {cmd}")
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=timeout)
        
        # Procesar salida de nmap
        hosts_found = []
        if result.returncode == 0:
            lines = result.stdout.split('\\n')
            current_host = None
            
            for line in lines:
                if 'Nmap scan report for' in line:
                    # Extraer IP
                    parts = line.split()
                    if len(parts) >= 5:
                        current_host = parts[4].strip('()')
                    else:
                        current_host = parts[-1]
                    hosts_found.append(current_host)
        
        logger.info(f"‚úÖ Encontrados {len(hosts_found)} hosts")
        
        return jsonify({
            'success': True,
            'hosts_found': hosts_found,
            'host_details': [{'ip': ip, 'status': 'up'} for ip in hosts_found],
            'scan_type': scan_type,
            'target_network': target_network,
            'command_executed': cmd,
            'raw_output': result.stdout if result.returncode == 0 else result.stderr
        })
        
    except subprocess.TimeoutExpired:
        return jsonify({
            'success': False,
            'error': 'Scan timeout expired',
            'timeout': timeout
        }), 408
        
    except Exception as e:
        logger.error(f"‚ùå Error en descubrimiento: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/enumeration', methods=['POST'])
def port_enumeration():
    try:
        data = request.get_json()
        hosts = data.get('hosts', [])
        ports = data.get('ports', 'top-100')
        scan_type = data.get('scan_type', 'syn')
        timeout = data.get('timeout', 180)
        
        logger.info(f"üîç Iniciando enumeraci√≥n de puertos para {len(hosts)} hosts")
        
        results = []
        
        for host in hosts:
            host_ip = host if isinstance(host, str) else host.get('ip', host)
            
            # Configurar comando nmap seg√∫n el tipo de escaneo
            if ports == 'top-20':
                port_arg = '--top-ports 20'
            elif ports == 'top-100':
                port_arg = '--top-ports 100'
            elif ports == 'top-1000':
                port_arg = '--top-ports 1000'
            else:
                port_arg = f'-p {ports}'
            
            if scan_type == 'syn':
                cmd = f"nmap -sS {port_arg} -sV --version-intensity 1 {host_ip}"
            else:
                cmd = f"nmap -sT {port_arg} -sV --version-intensity 1 {host_ip}"
                
            logger.info(f"Enumerando {host_ip}: {cmd}")
            
            try:
                result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=timeout)
                
                # Procesar salida para extraer puertos abiertos
                open_ports = []
                if result.returncode == 0:
                    lines = result.stdout.split('\\n')
                    for line in lines:
                        if '/tcp' in line and 'open' in line:
                            parts = line.split()
                            if len(parts) >= 3:
                                port_info = parts[0].split('/')[0]
                                service = parts[2] if len(parts) > 2 else 'unknown'
                                version = ' '.join(parts[3:]) if len(parts) > 3 else 'unknown'
                                
                                open_ports.append({
                                    'port': int(port_info),
                                    'service': service,
                                    'version': version,
                                    'state': 'open'
                                })
                
                results.append({
                    'host': host_ip,
                    'open_ports': open_ports,
                    'total_open_ports': len(open_ports),
                    'scan_status': 'completed'
                })
                
                logger.info(f"‚úÖ {host_ip}: {len(open_ports)} puertos abiertos")
                
            except subprocess.TimeoutExpired:
                results.append({
                    'host': host_ip,
                    'open_ports': [],
                    'total_open_ports': 0,
                    'scan_status': 'timeout',
                    'error': 'Scan timeout'
                })
                logger.warning(f"‚è∞ Timeout en {host_ip}")
        
        # Estad√≠sticas
        successful_scans = len([r for r in results if r['scan_status'] == 'completed'])
        total_open_ports = sum(r['total_open_ports'] for r in results)
        
        return jsonify({
            'success': True,
            'results': results,
            'statistics': {
                'total_hosts': len(hosts),
                'successful_scans': successful_scans,
                'total_open_ports': total_open_ports,
                'scan_type': scan_type,
                'ports_scanned': ports
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error en enumeraci√≥n: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    return jsonify({
        'status': 'healthy',
        'service': 'pentest-api',
        'version': '1.0.0'
    })

if __name__ == '__main__':
    port = int(os.environ.get('API_PORT', 8080))
    host = os.environ.get('API_HOST', '0.0.0.0')
    app.run(host=host, port=port, debug=False)
EOF

# Hacer el script ejecutable
RUN chmod +x /opt/pentest/api_server.py

# Configurar supervisor para manejar m√∫ltiples servicios
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:api_server]
command=python3 /opt/pentest/api_server.py
directory=/opt/pentest
autostart=true
autorestart=true
stderr_logfile=/var/log/supervisor/api_server.err.log
stdout_logfile=/var/log/supervisor/api_server.out.log
environment=API_PORT=8080,API_HOST=0.0.0.0

[program:sshd]
command=/usr/sbin/sshd -D
autostart=false
autorestart=true
EOF

# Configuraci√≥n de acceso SSH (opcional, para mantenimiento)
RUN mkdir -p /var/run/sshd
RUN echo 'root:pentestpass' | chpasswd
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config

# Crear directorios de logs
RUN mkdir -p /var/log/supervisor

# Verificar que las herramientas se instalaron correctamente
RUN echo "Verificando instalaciones..." && \
    nuclei -version && \
    subfinder -version && \
    httpx -version && \
    naabu -version && \
    echo "Todas las herramientas instaladas correctamente"

# Exponer puerto de la API
EXPOSE 8080

# Iniciar supervisor para manejar m√∫ltiples servicios
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
